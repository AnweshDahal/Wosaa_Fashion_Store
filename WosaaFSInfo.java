package wosaa_fashion_store_is;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import wosaa_fashion_store_is.BinarySearch;
import wosaa_fashion_store_is.MergeSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * Title: Wosaa Fashion Store Information System
 * Part: Main GUI
 * @author 19030375 Anwesh Dahal
 * @author 19030875 Bishesh Dangol
 * @author 19031389 Pratik Amatya
 * @author 19031710 Srijan Adhikari
 */
public class WosaaFSInfo extends javax.swing.JFrame {

    /**
     * Creates new form WosaaFSInfo
     */
    public WosaaFSInfo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderBG = new javax.swing.ButtonGroup();
        tableScrollPane = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        tableTitleLBL = new javax.swing.JLabel();
        controlsTbP = new javax.swing.JTabbedPane();
        addItemPane = new javax.swing.JPanel();
        addItemLBL = new javax.swing.JLabel();
        idLBL = new javax.swing.JLabel();
        idTF = new javax.swing.JTextField();
        nameLBL = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        brandLBL = new javax.swing.JLabel();
        brandTF = new javax.swing.JTextField();
        typeLBL = new javax.swing.JLabel();
        typeCB = new javax.swing.JComboBox<>();
        genderLBL = new javax.swing.JLabel();
        menRB = new javax.swing.JRadioButton();
        womenRB = new javax.swing.JRadioButton();
        unisexRB = new javax.swing.JRadioButton();
        sizeLBL = new javax.swing.JLabel();
        xsChkB = new javax.swing.JCheckBox();
        sChkB = new javax.swing.JCheckBox();
        mChkB = new javax.swing.JCheckBox();
        lChkB = new javax.swing.JCheckBox();
        xlChkB = new javax.swing.JCheckBox();
        xxlChkB = new javax.swing.JCheckBox();
        xxxLChkB = new javax.swing.JCheckBox();
        priceLBL = new javax.swing.JLabel();
        priceTF = new javax.swing.JTextField();
        addBTN = new javax.swing.JButton();
        clearBTN = new javax.swing.JButton();
        itemIDValidationLBL = new javax.swing.JLabel();
        brandValidationLBL = new javax.swing.JLabel();
        genderValidationLBL = new javax.swing.JLabel();
        typeValidationLBL = new javax.swing.JLabel();
        sizeValidationLBL = new javax.swing.JLabel();
        priceValidationLBL = new javax.swing.JLabel();
        nameValidationLBL = new javax.swing.JLabel();
        searchItemPane = new javax.swing.JPanel();
        searchItemLBL = new javax.swing.JLabel();
        searchPriceValidationLBL = new javax.swing.JLabel();
        searchItemByPriceLBL = new javax.swing.JLabel();
        priceSearchTF = new javax.swing.JTextField();
        searchPriceBTN = new javax.swing.JButton();
        searchItemByTypeLBL = new javax.swing.JLabel();
        searchTypeValidationLBL = new javax.swing.JLabel();
        typeSearchCB = new javax.swing.JComboBox<>();
        searchTypeBTN = new javax.swing.JButton();
        mainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        usrManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Wosaa Fashion Store - Inventory Information System");

        itemTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Brand", "Type", "Gender", "Size", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.setShowGrid(true);
        tableScrollPane.setViewportView(itemTable);

        tableTitleLBL.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tableTitleLBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tableTitleLBL.setText("Wosaa Fashion Store - Information System");

        controlsTbP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        addItemLBL.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addItemLBL.setText("Add New Item");

        idLBL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        idLBL.setText("Item ID");

        idTF.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        idTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idTFKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                idTFKeyReleased(evt);
            }
        });

        nameLBL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        nameLBL.setText("Item Name");

        nameTF.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        nameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameTFKeyReleased(evt);
            }
        });

        brandLBL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        brandLBL.setText("Item Brand");

        brandTF.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        brandTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                brandTFKeyReleased(evt);
            }
        });

        typeLBL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        typeLBL.setText("Item Type");

        typeCB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        typeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Type --", "T-Shirt", "Shirt", "Sweater", "Jacket", "Pants", "Coat" }));

        genderLBL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        genderLBL.setText("Item Gender");

        genderBG.add(menRB);
        menRB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        menRB.setText("Men");

        genderBG.add(womenRB);
        womenRB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        womenRB.setText("Women");

        genderBG.add(unisexRB);
        unisexRB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        unisexRB.setText("Unisex");

        sizeLBL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sizeLBL.setText("Item Size");

        xsChkB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        xsChkB.setText("XS");

        sChkB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sChkB.setText("S");

        mChkB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        mChkB.setText("M");

        lChkB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lChkB.setText("L");

        xlChkB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        xlChkB.setText("XL");

        xxlChkB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        xxlChkB.setText("XXL");

        xxxLChkB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        xxxLChkB.setText("XXXL");

        priceLBL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        priceLBL.setText("Item Price");

        priceTF.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        priceTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                priceTFKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                priceTFKeyReleased(evt);
            }
        });

        addBTN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addBTN.setText("Add");
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });

        clearBTN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        clearBTN.setText("Clear");
        clearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBTNActionPerformed(evt);
            }
        });

        itemIDValidationLBL.setForeground(new java.awt.Color(255, 0, 0));

        brandValidationLBL.setForeground(new java.awt.Color(255, 0, 0));

        genderValidationLBL.setForeground(new java.awt.Color(255, 0, 0));

        typeValidationLBL.setForeground(new java.awt.Color(255, 0, 51));

        sizeValidationLBL.setForeground(new java.awt.Color(255, 0, 0));

        priceValidationLBL.setForeground(new java.awt.Color(255, 0, 0));

        nameValidationLBL.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout addItemPaneLayout = new javax.swing.GroupLayout(addItemPane);
        addItemPane.setLayout(addItemPaneLayout);
        addItemPaneLayout.setHorizontalGroup(
            addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addItemPaneLayout.createSequentialGroup()
                        .addComponent(clearBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addBTN))
                    .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addItemLBL)
                        .addGroup(addItemPaneLayout.createSequentialGroup()
                            .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(sizeLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(typeLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(brandLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nameLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(idLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(genderLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(idTF)
                                    .addComponent(nameTF)
                                    .addComponent(brandTF)
                                    .addComponent(typeCB, 0, 226, Short.MAX_VALUE)
                                    .addGroup(addItemPaneLayout.createSequentialGroup()
                                        .addComponent(menRB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(womenRB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(unisexRB)))
                                .addGroup(addItemPaneLayout.createSequentialGroup()
                                    .addComponent(xsChkB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sChkB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(mChkB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lChkB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(xlChkB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(xxlChkB))
                                .addComponent(xxxLChkB)))
                        .addGroup(addItemPaneLayout.createSequentialGroup()
                            .addComponent(priceLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(priceTF, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(38, 38, 38)
                .addComponent(nameValidationLBL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(brandValidationLBL)
                    .addComponent(itemIDValidationLBL)
                    .addComponent(genderValidationLBL)
                    .addComponent(typeValidationLBL)
                    .addComponent(sizeValidationLBL)
                    .addComponent(priceValidationLBL))
                .addContainerGap(217, Short.MAX_VALUE))
        );
        addItemPaneLayout.setVerticalGroup(
            addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addItemLBL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLBL)
                    .addComponent(idTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemIDValidationLBL))
                .addGap(17, 17, 17)
                .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLBL)
                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameValidationLBL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brandLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(brandTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(brandValidationLBL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 12, Short.MAX_VALUE)
                .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLBL)
                    .addComponent(typeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeValidationLBL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genderLBL)
                    .addComponent(menRB)
                    .addComponent(womenRB)
                    .addComponent(unisexRB)
                    .addComponent(genderValidationLBL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 12, Short.MAX_VALUE)
                .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizeLBL)
                    .addComponent(xsChkB)
                    .addComponent(sChkB)
                    .addComponent(mChkB)
                    .addComponent(lChkB)
                    .addComponent(xlChkB)
                    .addComponent(xxlChkB)
                    .addComponent(sizeValidationLBL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE)
                .addComponent(xxxLChkB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceLBL)
                    .addComponent(priceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceValidationLBL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBTN)
                    .addComponent(clearBTN))
                .addContainerGap())
        );

        controlsTbP.addTab("Add New Item", addItemPane);

        searchItemLBL.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        searchItemLBL.setText("Search Item");

        searchPriceValidationLBL.setForeground(new java.awt.Color(255, 0, 51));

        searchItemByPriceLBL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchItemByPriceLBL.setText("Search Item By Price");

        priceSearchTF.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        priceSearchTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                priceSearchTFKeyPressed(evt);
            }
        });

        searchPriceBTN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchPriceBTN.setText("Search");
        searchPriceBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPriceBTNActionPerformed(evt);
            }
        });

        searchItemByTypeLBL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchItemByTypeLBL.setText("Search Item By Type");

        searchTypeValidationLBL.setForeground(new java.awt.Color(255, 0, 51));

        typeSearchCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Type --", "T-Shirt", "Shirt", "Sweater", "Jacket", "Pants", "Coat" }));

        searchTypeBTN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchTypeBTN.setText("Search");
        searchTypeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTypeBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchItemPaneLayout = new javax.swing.GroupLayout(searchItemPane);
        searchItemPane.setLayout(searchItemPaneLayout);
        searchItemPaneLayout.setHorizontalGroup(
            searchItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchItemPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(searchItemByTypeLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchItemByPriceLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(searchItemLBL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchTypeValidationLBL)
                    .addGroup(searchItemPaneLayout.createSequentialGroup()
                        .addGroup(searchItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(priceSearchTF)
                            .addComponent(typeSearchCB, 0, 185, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchPriceBTN)
                            .addComponent(searchTypeBTN)))
                    .addComponent(searchPriceValidationLBL))
                .addContainerGap(181, Short.MAX_VALUE))
        );
        searchItemPaneLayout.setVerticalGroup(
            searchItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchItemPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchItemPaneLayout.createSequentialGroup()
                        .addComponent(searchItemLBL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchItemPaneLayout.createSequentialGroup()
                        .addComponent(searchPriceValidationLBL)
                        .addGap(2, 2, 2)))
                .addGroup(searchItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchItemByPriceLBL)
                    .addComponent(priceSearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchPriceBTN))
                .addGap(2, 2, 2)
                .addComponent(searchTypeValidationLBL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchItemPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchItemByTypeLBL)
                    .addComponent(typeSearchCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTypeBTN))
                .addContainerGap(225, Short.MAX_VALUE))
        );

        controlsTbP.addTab("Search Item", searchItemPane);

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenu.add(fileMenu);

        helpMenu.setText("About");

        usrManual.setText("Help");
        usrManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usrManualActionPerformed(evt);
            }
        });
        helpMenu.add(usrManual);

        mainMenu.add(helpMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableScrollPane)
            .addComponent(tableTitleLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlsTbP)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tableTitleLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlsTbP)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchPriceBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPriceBTNActionPerformed
        String search_price = priceSearchTF.getText();
        
        if (!search_price.isEmpty()) {
            searchPriceValidationLBL.setText("");
            searchPrice(Integer.parseInt(search_price));
            priceSearchTF.setText("");
        } else {
            searchPriceValidationLBL.setText("*Required Field");
            searchPriceValidationLBL.grabFocus();
            JOptionPane.showMessageDialog(null,"The price field must not be left empty.","Alert",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_searchPriceBTNActionPerformed

    private void clearBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBTNActionPerformed
        //call the clearMethod in the program 
        clearMethod();
    }//GEN-LAST:event_clearBTNActionPerformed
    
    private void clearMethod() {
        idTF.setText("");
        nameTF.setText("");
        brandTF.setText("");
        typeCB.setSelectedIndex(0);
        genderBG.clearSelection();
        xsChkB.setSelected(false);
        sChkB.setSelected(false);
        lChkB.setSelected(false);
        mChkB.setSelected(false);
        xlChkB.setSelected(false);
        xxlChkB.setSelected(false);
        xxxLChkB.setSelected(false);
        priceTF.setText("");
    }
    /**
     * To insert the row of input into the jTable.
     * @param data 
     */
    public void populateData(String[] data) {
        //declaring the nextrow variable 0.
        int nextRow = 0;
        
        //To check if the table is empty or not.
        boolean empty = false;
        
        String s = "";
        
        //retriving the total row in the table.
        int rows = itemTable.getRowCount();
        
        //setting the total oolumns in the table 
        int colCount = 7;
        
        //To check if the row is occupied.
        do {
            s =(String) itemTable.getValueAt (nextRow, 0);
            if (s != null && s.length() != 0) {
                nextRow++;
            } else {
                empty = true;
            }
        } while (nextRow < rows && !empty);
        
        //Check if the row is empty
        if (nextRow >= rows && !empty) {
            
            //Declare a DefaultTableModel
            DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
            
            //To add the row of data into the model.
            model.addRow(data);
            clearMethod();
        }else {
            //To add the row of data into the model.
            for (int i = 0; i < colCount; i++) {
                itemTable.setValueAt(data[i], nextRow, i);
            }
            //Clear all the fields after adding the data.
            clearMethod();
        }
    }
    
    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        //Calls the check data method.
        if (isCSVImported){
            checkData();
        } else {
            JOptionPane.showMessageDialog(null,"Import the data from the CSV before adding the data","CSV Not Imported",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addBTNActionPerformed
    
    /**
     * Get all the data from the table and validate it.
     */
    public void checkData() {
        //Get the item id from the field
        String item_id = idTF.getText();
        
        //Get the item name from the field
        String item_name = nameTF.getText();
        
        //Get the brand name from the field
        String item_brand = brandTF.getText();

        //Get the item type from the field
        String item_type = (String) typeCB.getSelectedItem();

        //Set the selected gender as null
        String item_gender = "";
        
        //Set the gender if men is selected
        if (menRB.isSelected()) {
            item_gender = menRB.getText();
        }
        //Set the gender if women is selected
        if (womenRB.isSelected()) {
            item_gender = womenRB.getText();
        }
        //Set the gender if unisex is selected
        if (unisexRB.isSelected()) {
            item_gender = unisexRB.getText();
        }
        
        //Set the item size as null
        String item_size = "";
        //Set this size if xs is selected
        if (xsChkB.isSelected()){
            item_size = item_size + xsChkB.getText() + " | ";
        }
        //Set this size if s is selected
        if (sChkB.isSelected()){
            item_size = item_size + sChkB.getText() + " | ";
        }
        //Set this size if m is selected
        if (mChkB.isSelected()){
            item_size = item_size + mChkB.getText() + " | ";
        }
        //Set this size if l is selected
        if (lChkB.isSelected()){
            item_size = item_size + lChkB.getText() + " | ";
        }
        //Set this size if xl is selected
        if (xlChkB.isSelected()){
            item_size = item_size + xlChkB.getText() + " | ";
        }
        //Set this size if xx is selected
        if (xxlChkB.isSelected()){
            item_size = item_size + xxlChkB.getText() + " | ";
        }
        //Set this size if xxl is selected
        if (xxxLChkB.isSelected()){
            item_size = item_size + xxxLChkB.getText() + " | ";
        }
        
        //To discard string in the last position
        if (item_size.length() != 0) {
            item_size = item_size.substring(0, item_size.length() - 2);
        }

        //Get the price from the fields
        String item_price = priceTF.getText();

        //Check if the item id field is empty 
        if (!item_id.isEmpty()){
            //Check if the item name field is empty
            if (!item_name.isEmpty()) {
                //Check if the brand name in the field is empty
                if (!item_brand.isEmpty()) {
                    //Check if the correct combo box is selected
                    if (typeCB.getSelectedIndex() != 0) {
                        //Check if the gender is empty
                        if (!item_gender.isEmpty()) {
                            //Check if the size of the item the field is empty
                            if (!item_size.isEmpty()) {
                                //Check if the price of the item in the field is empty
                                if (!item_price.isEmpty()) {
                                    
                                    //Store the variables in an array 
                                    String data [] = {item_id, item_name, item_brand, item_type, item_gender, item_size, item_price};
                                    
                                    //Hide all the hidden labels 
                                    Warning();
                                    
                                    //Get the total number of rows 
                                    int totalRows = itemTable.getRowCount();
                                    //Set the total number of columns
                                    int column = 7;
                                    //Find the total number of rows filled in the table
                                    int rows = findFilledRows(totalRows);
                                    System.out.println(rows);
                                    
                                    //Declare checkItemId variable with values as null
                                    String checkItemId = "";
                                    //Declare checkIdName variable with values as null
                                    String checkItemName = "";
                                    //Declare checkItemBrand variable with values as null
                                    String checkItemBrand = "";
                                    //Declare checkItemType variable with values as null
                                    String checkItemType = "";
                                    //Declare checkItemGender variable with values as null
                                    String checkItemGender = "";
                                    //Declare checkItemSize variable with values as null
                                    String checkItemSize = "";
                                    //Declare checkItemPrice variable with values as null
                                    String checkItemPrice = "";
                                    
                                    //Implementing a try catch 
                                    try {
                                        //Check if the table is empty
                                        if (checkTableEmpty()) {
                                            saveToCSV(data);
                                            //If table is completely empty then fill the value.
                                            populateData(data); 
                                        }
                                        //If the table is not empty then check the values
                                        else {
                                            //Declare boolen variable as false
                                            boolean checkFlag = false;
                                            //Create an object to store the row of data
                                            // Object[][] rowData = new Object[itemTable.getRowCount()][itemTable.getColumnCount()];
                                            
                                            //Use for loop to iterate through the row
                                            for (int j = 0; j < rows; j++) {
                                                //Using a nested for loop to iterate through all the column values
                                                checkItemId = (String) itemTable.getValueAt(j, 0);
                                                
                                                if (checkItemId.equals(item_id)){
                                                        checkFlag = true;
                                                        break;
                                                    } 
//                                                for (int i = 0; i < column; i++) {
//                                                    //Get the value and store it in the array
//                                                    // rowData[j][i] = itemTable.getValueAt(j, i);
//                                                    //Store the value of id in the array into the variables 
//                                                    // checkItemId = (String) rowData[j][0];
//                                                    //Store the value of name in the array into the variables
////                                                    checkItemName = (String) rowData[j][1];
////                                                    //Store the value of brand in the array into the variables
////                                                    checkItemBrand = (String) rowData[j][2];
////                                                    //Store the value of type in the array into the variables
////                                                    checkItemType = (String) rowData[j][3];
////                                                    //Store the value of gender in the array into the variables
////                                                    checkItemGender = (String) rowData[j][4];
////                                                    //Store the value of size in the array into the variables
////                                                    checkItemSize = (String) rowData[j][5];
////                                                    //Store the value of price in the array into the variables
////                                                    checkItemPrice = (String) rowData[j][6];  
//                                                    
//                                                    //Check duplicate data entry
//                                                    
////                                                    else {
////                                                        checkFlag = false;
////                                                    }
//                                                }
                                            }
//                                            //Check duplicate data entry
//                                            if (checkItemId.equals(item_id) && checkItemName.equals(item_name) && checkItemBrand.equals(item_brand) && checkItemType.equals(item_type) && checkItemGender.equals(item_gender) && checkItemSize.equals(item_size) && checkItemPrice.equals(item_price)){
//                                                checkFlag = true;
//                                            } else {
//                                                checkFlag = false;
//                                            }
                                            
                                            //If true restrict the entry 
                                            if (checkFlag){
                                                JOptionPane.showMessageDialog(addItemPane, " New ID  is a duplicate of an existing ID: " + item_id,"Duplicate data entry found.",JOptionPane.WARNING_MESSAGE);
                                            //If false then add the data in the table
                                            } else {
                                                saveToCSV(data);
                                                populateData(data);
                                            }
                                        }
                                    //Catch any exceptions that occur during the execution
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(addItemPane, "Error" + e + "occured.","Alert",JOptionPane.WARNING_MESSAGE);
                                        e.printStackTrace();
                                    }
                                //Display if price field is left empty.
                                } else {
                                    warnMessage(priceValidationLBL, "Please select the price of the item.");
                                    priceTF.grabFocus();
                                }
                            //Display if size field is left empty
                            } else {
                                warnMessage(sizeValidationLBL, "Please select the size of the item.");
                            }
                        //Display if gender is left not selected
                        }else {
                            warnMessage(genderValidationLBL, "Please select the gender of the item.");
                        }
                    //Display if type is not selected.
                    } else {
                        warnMessage(typeValidationLBL, "Please select the type of the item.");
                    }
                //Display if brand field is left empty
                } else {
                    warnMessage(brandValidationLBL, "Please fill in the brand of the item.");
                    brandTF.grabFocus();
                }
            //Display if name field is left empty
            } else {
                warnMessage(nameValidationLBL, "Please fill in the name of the item.");
                nameTF.grabFocus();
            }
        //Display if id field is left empty
        } else {
            warnMessage(itemIDValidationLBL, "Please fill in the id of the item.");
            idTF.grabFocus();
        }
    }
    
    private void warnMessage(JLabel warnLabel, String warnMessage) {
        Warning();
        warnLabel.setText("*Required Field");
        JOptionPane.showMessageDialog(addItemPane, warnMessage,"Alert",JOptionPane.WARNING_MESSAGE);
    }
    
    /**
     * To save all the elements of the array to the CSV File
     * @param data
     * @throws IOException 
     */
    private void saveToCSV(String[] data) throws IOException{
        // retrieving file location
        String fileLocation=getFileLocation();
        //   try catch block to catch IOEXception
        try{
            FileWriter fw=new FileWriter(fileLocation,true);
            BufferedWriter bw= new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            String toAdd = "";
            // storing all array elements to a single string seperated by comma
            for (String item : data) {
                toAdd += item + ",";
            }
            
            // using substring method to remove the comma at the end of the string
            toAdd = toAdd.substring(0, toAdd.length() - 1);

            // adding to the CSV File
            pw.println(toAdd);
            pw.flush();
            pw.close();
           
        }
        catch (IOException E){
        // Error message is displayed if IOException occurs
            JOptionPane.showMessageDialog(null,"Record not saved in the CSV File","Alert",JOptionPane.WARNING_MESSAGE);
        }
    }
    /**
     * To set all the labels as null.
     */
    public void Warning() {
        itemIDValidationLBL.setText("");
        nameValidationLBL.setText("");
        brandValidationLBL.setText("");
        typeValidationLBL.setText("");
        genderValidationLBL.setText("");
        sizeValidationLBL.setText("");
        priceValidationLBL.setText("");
    }
    
    /**
     * Entry of only numbers and backspace allowed
     * @param evt 
     */
    private void idTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idTFKeyPressed
        //Get the character when pressed from keyboard
        char idCr = evt.getKeyChar();
        if (Character.isDigit(idCr)||evt.getKeyCode()==8) {
            idTF.setEditable(true);
        } else {
            idTF.setEditable(false);
        }
    }//GEN-LAST:event_idTFKeyPressed

    private void priceTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceTFKeyPressed
        //Get the character when pressed from keyboard
        char priceCr = evt.getKeyChar();
        if (Character.isDigit(priceCr)||evt.getKeyCode()==8) {
            priceTF.setEditable(true);
        } else {
            priceTF.setEditable(false);
        }
    }//GEN-LAST:event_priceTFKeyPressed

    private void priceSearchTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceSearchTFKeyPressed
        //Get the character when pressed from keyboard
        char searchPriceCr = evt.getKeyChar();
        if (Character.isDigit(searchPriceCr)||evt.getKeyCode()==8) {
            priceSearchTF.setEditable(true);
        } else {
            priceSearchTF.setEditable(false);
        }
    }//GEN-LAST:event_priceSearchTFKeyPressed

    private void searchTypeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTypeBTNActionPerformed
        //Get the type selected 
        String search_type = (String) typeSearchCB.getSelectedItem();
        //Perform if selected type is not index 0
        if (typeSearchCB.getSelectedIndex() != 0) {
            searchTypeValidationLBL.setText("");
            searchType(search_type);
            typeSearchCB.setSelectedIndex(0);
        } else {
            searchTypeValidationLBL.setText("*Required Field");
            JOptionPane.showMessageDialog(null,"The type of the item should not be left empty.","Alert",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_searchTypeBTNActionPerformed

    private void idTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idTFKeyReleased
        //Set the id label as null when a character is pressed from the keyboard
        itemIDValidationLBL.setText("");
    }//GEN-LAST:event_idTFKeyReleased

    private void nameTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTFKeyReleased
        //Set the name label as null when a character is pressed from the keyboard
        nameValidationLBL.setText("");
    }//GEN-LAST:event_nameTFKeyReleased

    private void brandTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_brandTFKeyReleased
        //Set the brand label as null when a character is pressed from the keyboard
        brandValidationLBL.setText("");
    }//GEN-LAST:event_brandTFKeyReleased

    private void priceTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceTFKeyReleased
        //Set the price label as null when a character is pressed from the keyboard
        priceValidationLBL.setText("");
    }//GEN-LAST:event_priceTFKeyReleased
    
    /**
     * To import the data from the CSV file and pass it to the populateData method
     * @param evt 
     */
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // Not allowing the JTable to be populated if the CSV File already been imported    
        if (!isCSVImported){
            String line;
            String fileLocation=getFileLocation();
            // Implementing try catch block to catch errors and display appropriate error messages
            try {

                BufferedReader br = new BufferedReader(new FileReader(fileLocation));
            // While loop runs until the next line in the CSV File is not null
                while ((line= br.readLine())!=null){
                    // Storing the data into array                     
                    String [] data = line.split(",");
                    // Setting the variable to true as the CSV File has been succesfully imported
                    isCSVImported=true;
                    // the populateData method populates the JTable with elements of the array
                    populateData(data);
                }
            } catch (FileNotFoundException ex1) {
                // Error message is displayed if the CSV file is not found occurs
                JOptionPane.showMessageDialog(null,"CSV File Not Found.\n Hint: Keep the CSV File inside the package folder of the project directory.","Alert",JOptionPane.WARNING_MESSAGE);
            } catch (IOException ex2) {
                // Error message is displayed if IOException occurs
                 JOptionPane.showMessageDialog(null,"IOException Occured.","Alert",JOptionPane.WARNING_MESSAGE);
            }
        }else{
//           // The message is displayed to inform user that the CSV File has already been imported
            JOptionPane.showMessageDialog(null,"The CSV File has already been imported.");
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        WindowEvent windowCloseEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(windowCloseEvent);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void usrManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usrManualActionPerformed
        // TODO add your handling code here:
        try{
            File file = new File(System.getProperty("user.dir") + "\\src\\wosaa_fashion_store_is\\README.md");
            if(!Desktop.isDesktopSupported()){
                JOptionPane.showMessageDialog(null,"Cant Load File","Desktop Not Supported",JOptionPane.ERROR_MESSAGE);
                return;
            }
            Desktop desktop = Desktop.getDesktop();
            if(file.exists()){
                desktop.open(file);
            } else{
                JOptionPane.showMessageDialog(null,"File Missing","Error",JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e){
            JOptionPane.showMessageDialog(null,"File Not Found","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_usrManualActionPerformed
    
    /**
     * To return the file path of the CSV File in string datatype
     * @return fileLocation 
     */
    private String getFileLocation(){
        // Getting the path of csv file
        String fileLocation=System.getProperty("user.dir") + "\\src\\wosaa_fashion_store_is\\wosaaStoreDatabase.csv";
        // Returning the value of the fileLocation variable when the method is called
        return fileLocation;
    }
    
    private void searchType(String itemType){
        // Check if the table contains data
        if(checkTableEmpty()){
            JOptionPane.showMessageDialog(null,"There are no items to search","Alert",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Total number of rows in the table
        int totalRows = itemTable.getRowCount();
        // Number of columns in the table
        int columns = 7;
        // Number of filled row
        int rows = findFilledRows(totalRows);
        // Getting the number of filled rows
        Object[][] itemsArray = new Object[rows][columns];
        
        // Insert Data into an array for search
        for (int i = 0; i < rows; i++){
            for (int j = 0; j < columns; j++){
                itemsArray[i][j] = itemTable.getValueAt(i, j);
            }
        }
        
        // Stores the name of the required items
        String answer = "";
        
        // retrieving the items of the required type
        for (int i = 0; i < itemsArray.length; i++){
            if (itemsArray[i][3].equals(itemType)){
                answer += "\n > " + (String) itemsArray[i][1];
            }
        }
        
        if (answer.equals("")){
            JOptionPane.showMessageDialog(searchItemPane,"Item Not Found!","Alert",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Display the result
        JOptionPane.showMessageDialog(searchItemPane, "Here are the " + itemType + " in the data base" + answer);
    }
    
    /**
     * Checks if the table is empty
     * 
     * @return isEmpty  
     */
    private boolean checkTableEmpty(){
        Object checkObj = itemTable.getValueAt(0, 0);
        if (checkObj == null){
            return true;
        } else {
            return false;
        }
    }
    
    private void searchPrice(int price){
        
        // Check if the table contains data
        if(checkTableEmpty()){
            JOptionPane.showMessageDialog(null,"There are no items to search","Alert",JOptionPane.WARNING_MESSAGE);
            return;
        }
            
        // Total number of rows in the table
        int totalRows = itemTable.getRowCount();
        // Number of columns in the table
        int columns = 7;
        // Number of filled row
        int rows = findFilledRows(totalRows);
        // Getting the number of filled rows
        Object[][] itemsArray = new Object[rows][columns];
        
        // Insert Data into an array for search
        for (int i = 0; i < rows; i++){
            for (int j = 0; j < columns; j++){
                itemsArray[i][j] = itemTable.getValueAt(i, j);
            }
        }
        // Sorting the itemsArray using MergeSort
        MergeSorter.sort(itemsArray);
        
        // lowest index of the array, defaults to 0
        int low = 0;
        
        // highest index of the array, equals length of array -1
        int high = itemsArray.length - 1;
        
        // searching the item in the array using binary search
        int ansPos = BinarySearch.search(itemsArray, low, high, price);
        
        if (ansPos == -1){
            JOptionPane.showMessageDialog(searchItemPane,"Item Not Found!","Alert",JOptionPane.WARNING_MESSAGE);
            return;
        }
   
        
        
        /**
         * Since the binary search may not return the first occurrence of the
         * item with same price in the items table the value of first
         * occurrence is determined by the following loop
         */       
        while (ansPos < itemsArray.length - 1){
            if (Integer.parseInt((String) itemsArray[ansPos + 1][6]) == price){
                System.out.println(itemsArray[ansPos][6]);
                ansPos++;
            } else{
                break;
            }
        }
        
        Object[] targetItem = itemsArray[ansPos];
        
        String display = "Item Found:" + 
                            "\nItem ID: " + targetItem[0] + 
                            "\nItem Name: " + targetItem[1] +
                            "\nItem Brand: " + targetItem[2] +
                            "\nItem Type: " + targetItem[3] +
                            "\nItem Gender: " + targetItem[4] +
                            "\nItem Sizes: " + targetItem[5] +
                            "\nItem Price: " + targetItem[6];
        
        JOptionPane.showMessageDialog(addItemPane, display);
    }
    
    /**
     * Gets the number of filled rows
     * 
     * @param totalRows
     * @return 
     */
    private int findFilledRows(int totalRows){
        int rows = 0;
        for (int i = 0; i < totalRows; i++){
            // Only the item at index 0 is checked because 
            // the validation during the insertion assures that
            // all of the columns on the rows have data in them
            Object checkRowObj = itemTable.getValueAt(i,0);
            if (checkRowObj != null){
                rows++;
            } else{
                // Stop checking after a null value is found
                break;
            }
        }
       return rows; 
    }
            
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WosaaFSInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WosaaFSInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WosaaFSInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WosaaFSInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WosaaFSInfo().setVisible(true);
            }
        });
    }
    
    private static boolean isCSVImported=false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBTN;
    private javax.swing.JLabel addItemLBL;
    private javax.swing.JPanel addItemPane;
    private javax.swing.JLabel brandLBL;
    private javax.swing.JTextField brandTF;
    private javax.swing.JLabel brandValidationLBL;
    private javax.swing.JButton clearBTN;
    private javax.swing.JTabbedPane controlsTbP;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.ButtonGroup genderBG;
    private javax.swing.JLabel genderLBL;
    private javax.swing.JLabel genderValidationLBL;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel idLBL;
    private javax.swing.JTextField idTF;
    private javax.swing.JLabel itemIDValidationLBL;
    private javax.swing.JTable itemTable;
    private javax.swing.JCheckBox lChkB;
    private javax.swing.JCheckBox mChkB;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JRadioButton menRB;
    private javax.swing.JLabel nameLBL;
    private javax.swing.JTextField nameTF;
    private javax.swing.JLabel nameValidationLBL;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JLabel priceLBL;
    private javax.swing.JTextField priceSearchTF;
    private javax.swing.JTextField priceTF;
    private javax.swing.JLabel priceValidationLBL;
    private javax.swing.JCheckBox sChkB;
    private javax.swing.JLabel searchItemByPriceLBL;
    private javax.swing.JLabel searchItemByTypeLBL;
    private javax.swing.JLabel searchItemLBL;
    private javax.swing.JPanel searchItemPane;
    private javax.swing.JButton searchPriceBTN;
    private javax.swing.JLabel searchPriceValidationLBL;
    private javax.swing.JButton searchTypeBTN;
    private javax.swing.JLabel searchTypeValidationLBL;
    private javax.swing.JLabel sizeLBL;
    private javax.swing.JLabel sizeValidationLBL;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JLabel tableTitleLBL;
    private javax.swing.JComboBox<String> typeCB;
    private javax.swing.JLabel typeLBL;
    private javax.swing.JComboBox<String> typeSearchCB;
    private javax.swing.JLabel typeValidationLBL;
    private javax.swing.JRadioButton unisexRB;
    private javax.swing.JMenuItem usrManual;
    private javax.swing.JRadioButton womenRB;
    private javax.swing.JCheckBox xlChkB;
    private javax.swing.JCheckBox xsChkB;
    private javax.swing.JCheckBox xxlChkB;
    private javax.swing.JCheckBox xxxLChkB;
    // End of variables declaration//GEN-END:variables
}
